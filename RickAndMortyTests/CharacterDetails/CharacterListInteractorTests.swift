//
//  CharacterListInteractorTests.swift
//  RickAndMorty
//
//  Created by Ricardo Ruiz on 13/12/2019.
//  Copyright (c) 2019 Ricardo Ruiz. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import RickAndMorty
import XCTest

class CharacterListInteractorTests: XCTestCase
{
  // MARK: Subject under test
  
  var sut: CharacterListInteractor!
  
  // MARK: Test lifecycle
  
  override func setUp()
  {
    super.setUp()
    setupCharacterListInteractor()
  }
  
  override func tearDown()
  {
    super.tearDown()
  }
  
  // MARK: Test setup
  
  func setupCharacterListInteractor()
  {
    sut = CharacterListInteractor()
  }
  
  // MARK: Test doubles
  
  class CharacterListPresentationLogicSpy: CharacterListPresentationLogic
  {
    var presentCharacterListCalled = false

    func presentCharacterList(response: CharacterList.LoadCharacters.Response) {
        presentCharacterListCalled = true
    }
  }
    
    class CharacterListWorkerSpy: CharacterListWorker
    {
        // MARK: Method call expectations
        var loadCharactersCalled = false
        var dummyCharacterListResult = CharacterListResult(info: PageInfo(count: 9, pages: 9, next: "next", prev: "prev"), results: [Character(id: 1, name: "Name", status: "Status", species: "Species", type: "Type", gender: "Gender", origin: Origin(name: "origin", url: "url"), location: Location(name: "name", url: "url"), image: "image", episode: [], url: "url", created: "created")])

        // MARK: Spied methods
        override func loadCharacterList(completionHandler: @escaping ((CharacterListResult) -> Void)) {
            loadCharactersCalled = true
            completionHandler(dummyCharacterListResult)
        }
    }
  
  // MARK: Tests
  
  func testListCharacters()
  {
    // Given
    let presenterSpy = CharacterListPresentationLogicSpy()
    let workerSpy = CharacterListWorkerSpy()
    
    sut.presenter = presenterSpy
    sut.worker = workerSpy
    
    let request = CharacterList.LoadCharacters.Request()
    
    // When
    sut.loadCharacterList(request: request)
    
    // Then
    XCTAssertTrue(presenterSpy.presentCharacterListCalled, "presentCharactersCalled(request:) should ask the presenter to format the result")
    XCTAssertTrue(workerSpy.loadCharactersCalled, "loadCharactersCalled(request:) should ask the worker to get the result")
  }
}
