//
//  CharacterListPresenterTests.swift
//  RickAndMorty
//
//  Created by Ricardo Ruiz on 13/12/2019.
//  Copyright (c) 2019 Ricardo Ruiz. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import RickAndMorty
import XCTest

class CharacterListPresenterTests: XCTestCase
{
    // MARK: Subject under test
    
    var sut: CharacterListPresenter!
    
    // MARK: Test lifecycle
    
    override func setUp()
    {
        super.setUp()
        setupCharacterListPresenter()
    }
    
    override func tearDown()
    {
        super.tearDown()
    }
    
    // MARK: Test setup
    
    func setupCharacterListPresenter()
    {
        sut = CharacterListPresenter()
    }
    
    // MARK: Test doubles
    
    class CharacterListDisplayLogicSpy: CharacterListDisplayLogic
    {
        var displayCharacterListCalled = false
        
        func displayCharacterList(viewModel: CharacterList.LoadCharacters.ViewModel) {
            displayCharacterListCalled = true
        }
    }
    
    // MARK: Tests
    
    func testDisplayCharacterList()
    {
        // Given
        let spy = CharacterListDisplayLogicSpy()
        sut.viewController = spy
        let response = CharacterList.LoadCharacters.Response(characterListResult: CharacterListResult(info: PageInfo(count: 9, pages: 9, next: "next", prev: "prev"), results: [Character(id: 1, name: "Name", status: "Status", species: "Species", type: "Type", gender: "Gender", origin: Origin(name: "origin", url: "url"), location: Location(name: "name", url: "url"), image: "image", episode: [], url: "url", created: "created")]))
        
        // When
        sut.presentCharacterList(response: response)
        
        // Then
        XCTAssertTrue(spy.displayCharacterListCalled, "presentSomething(response:) should ask the view controller to display the result")
    }
}
