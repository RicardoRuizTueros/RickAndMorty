//
//  CharacterListViewControllerTests.swift
//  RickAndMorty
//
//  Created by Ricardo Ruiz on 13/12/2019.
//  Copyright (c) 2019 Ricardo Ruiz. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import RickAndMorty
import XCTest

class CharacterListViewControllerTests: XCTestCase
{
    // MARK: Subject under test
    
    var sut: CharacterListViewController!
    var window: UIWindow!
    
    // MARK: Test lifecycle
    
    override func setUp()
    {
        super.setUp()
        window = UIWindow()
        setupCharacterListViewController()
    }
    
    override func tearDown()
    {
        window = nil
        super.tearDown()
    }
    
    // MARK: Test setup
    
    func setupCharacterListViewController()
    {
        sut = CharacterListViewController(nibName: nil, bundle: nil)
    }
    
    func loadView()
    {
        window.addSubview(sut.view)
        RunLoop.current.run(until: Date())
    }
    
    // MARK: Test doubles
    
    class CharacterListBusinessLogicSpy: CharacterListBusinessLogic
    {
        var loadCharacterListCalled = false
        
       func loadCharacterList(request: CharacterList.LoadCharacters.Request) {
            loadCharacterListCalled = true
        }
        
    }
    
    // MARK: Tests
    
    func testShouldDoSomethingWhenViewIsLoaded()
    {
        // Given
        let spy = CharacterListBusinessLogicSpy()
        sut.interactor = spy
        
        // When
        sut.viewDidLoad()
        
        // Then
        XCTAssertTrue(spy.loadCharacterListCalled, "viewDidLoad() should load the character list!")
    }
    
    func testDisplayCharacters()
    {
        // Given
        let character = Character(id: 1, name: "Name", status: "Status", species: "Species", type: "Type", gender: "Gender", origin: Origin(name: "origin", url: "url"), location: Location(name: "name", url: "url"), image: "image", episode: [], url: "url", created: "created")
        let viewModel = CharacterList.LoadCharacters.ViewModel(characterListResult: [character])
        
        // When
        sut.displayCharacterList(viewModel: viewModel)
        
        // Then
        XCTAssertTrue(sut.characterList.count == 1, "1 character should be displayed!")
    }
}
