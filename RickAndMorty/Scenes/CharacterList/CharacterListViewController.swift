//
//  CharacterListViewController.swift
//  RickAndMorty
//
//  Created by Ricardo Ruiz on 12/12/2019.
//  Copyright (c) 2019 Ricardo Ruiz. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol CharacterListDisplayLogic: class
{
    func displayCharacterList(viewModel: CharacterList.LoadCharacters.ViewModel)
}

class CharacterListViewController: UITableViewController, CharacterListDisplayLogic
{
    var characterList : [Character] = []
    var interactor: CharacterListBusinessLogic?
    var router: (NSObjectProtocol & CharacterListRoutingLogic & CharacterListDataPassing)?
    
    let searchController = UISearchController(searchResultsController: nil)
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = CharacterListInteractor()
        let presenter = CharacterListPresenter()
        let router = CharacterListRouter()
        
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
        
        title = "Character List"
        tableView.delegate = self
        tableView.dataSource = self
        tableView.register(CharacterCell.self, forCellReuseIdentifier: "CharacterCell")
        
        loadCharacterList()
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        loadCharacterList()
    }
    
    // MARK: Do something
    
    func loadCharacterList()
    {
        let request = CharacterList.LoadCharacters.Request()
        interactor?.loadCharacterList(request: request)
    }
    
    func displayCharacterList(viewModel: CharacterList.LoadCharacters.ViewModel)
    {
        characterList = viewModel.characterListResult
        tableView.reloadData()
    }
    
    // MARK: Tableview delegates
    
    override func tableView(_ tableView: UITableView, viewForHeaderInSection section: Int) -> UIView? {
        let headerView = UIView()
        
        headerView.addSubview(searchController.searchBar)
        
        searchController.searchBar.translatesAutoresizingMaskIntoConstraints = false;
        
        searchController.searchBar.widthAnchor.constraint(equalTo: headerView.widthAnchor, constant: 0.95).isActive = true
        searchController.searchBar.heightAnchor.constraint(equalToConstant: 70).isActive = true
        searchController.searchBar.topAnchor.constraint(equalTo: headerView.safeAreaLayoutGuide.topAnchor).isActive = true
        searchController.searchBar.centerXAnchor.constraint(equalTo: headerView.centerXAnchor).isActive = true
        
        return headerView
    }
    
    override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let character = characterList[indexPath.row]
        let cell = CharacterCell(character: character)
        let tapGesture = UITapGestureRecognizer(target: self, action: #selector(CharacterDetails(sender:)))
        
        cell.addGestureRecognizer(tapGesture)
        
        return cell
    }
    
    override func tableView(_ tableView: UITableView, heightForHeaderInSection section: Int) -> CGFloat {
        return 100
    }
    
    override func numberOfSections(in tableView: UITableView) -> Int {
        return 1
    }
    
    override func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        return 100
    }
    
    override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return characterList.count
    }
    
    // MARK: Selector
    
    @objc func CharacterDetails(sender : UITapGestureRecognizer)
    {
        if let cell = sender.view as? CharacterCell {
            if let index = tableView.indexPath(for: cell)?.row {
                router?.dataStore?.character = characterList[index]
                router?.routeToCharacterDetails()
            }
        }
    }
}
