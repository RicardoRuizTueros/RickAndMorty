//
//  CharacterDetailsViewController.swift
//  RickAndMorty
//
//  Created by Ricardo Ruiz on 12/12/2019.
//  Copyright (c) 2019 Ricardo Ruiz. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol CharacterDetailsDisplayLogic: class
{
    func displaySomething(viewModel: CharacterDetails.Something.ViewModel)
}

class CharacterDetailsViewController: UIViewController, CharacterDetailsDisplayLogic
{
    var interactor: CharacterDetailsBusinessLogic?
    var router: (NSObjectProtocol & CharacterDetailsRoutingLogic & CharacterDetailsDataPassing)?
    
    var character : Character?
    
    var image = UIImageView()
    var name = UILabel()
    var status = UILabel()
    var species = UILabel()
    var gender = UILabel()
    var lastLocation = UILabel()
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = CharacterDetailsInteractor()
        let presenter = CharacterDetailsPresenter()
        let router = CharacterDetailsRouter()
        
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
        
        view.backgroundColor = .white
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
    }
    
    // MARK: Do something
    
    func ShowCharacterDetails()
    {
        character = router?.dataStore?.character
        
        if let character = character {
            image.load(url: URL(string: character.image)!)
            
            name.text = character.name
            name.font = UIFont.preferredFont(forTextStyle: .title2)
            
            status.text = character.status
            status.font = UIFont.preferredFont(forTextStyle: .callout)
            
            species.text = character.species
            species.font = UIFont.preferredFont(forTextStyle: .callout)
            
            gender.text = character.gender
            gender.font = UIFont.preferredFont(forTextStyle: .body)
            
            lastLocation.text = character.location.name
            lastLocation.font = UIFont.preferredFont(forTextStyle: .body)
            
            let vStack = UIStackView(arrangedSubviews: [name, status, species, gender, lastLocation])
            vStack.alignment = .leading
            vStack.axis = .vertical
            
            view.addSubview(image)
            view.addSubview(vStack)
            
            image.translatesAutoresizingMaskIntoConstraints = false
            vStack.translatesAutoresizingMaskIntoConstraints = false
            
            NSLayoutConstraint.activate ([
                image.leadingAnchor.constraint(equalTo: view.safeAreaLayoutGuide.leadingAnchor, constant: 20),
                image.topAnchor.constraint(equalTo: view.safeAreaLayoutGuide.topAnchor, constant: 20),
                image.widthAnchor.constraint(equalToConstant: 100),
                image.heightAnchor.constraint(equalToConstant: 100),
                
                vStack.topAnchor.constraint(equalTo: image.topAnchor),
                vStack.leadingAnchor.constraint(equalTo: image.trailingAnchor, constant: 20)
            ])
        }
    }
    
    func displaySomething(viewModel: CharacterDetails.Something.ViewModel)
    {
        
    }
}
